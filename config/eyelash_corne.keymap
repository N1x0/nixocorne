#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 42 43 44 45 45 46 47>;
            require-prior-idle-ms = <75>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 34 42 43 44 45 46 47>;
            require-prior-idle-ms = <75>;
        };

        nav_word: nav_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP>;
            ignore-modifiers;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        CAPS_WORD {
            bindings = <&caps_word>;
            key-positions = <32 37>;
        };

        xcl_f2 {
            bindings = <&kp F2>;
            key-positions = <23 25>;
            layers = <1>;
        };

        f9 {
            bindings = <&kp F9>;
            key-positions = <23 24>;
        };

        SWAP_QWERTY {
            bindings = <&tog 5>;
            key-positions = <8 9 10 11>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Colemak";
            bindings = <
&kp ESCAPE     &kp Q            &kp W            &kp F         &kp P              &kp B                             &kp UP                &kp J        &kp L              &kp U         &kp Y            &kp SEMI         &kp DELETE
&nav_word 1    &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LCTRL S  &hml LEFT_SHIFT T  &kp G                   &kp LEFT  &kp ENTER  &kp RIGHT  &kp M        &hmr LEFT_SHIFT N  &hmr LCTRL E  &hmr LEFT_ALT I  &hmr LEFT_GUI O  &kp SINGLE_QUOTE
&kp BACKSLASH  &kp Z            &kp X            &kp C         &kp D              &kp V      &kp SPACE              &kp DOWN              &kp K        &kp H              &kp COMMA     &kp DOT          &kp FSLH         &kp ESC
                                                 &sl 4         &lt 2 SPACE        &lt 3 TAB                                               &lt 6 ENTER  &lt 1 BACKSPACE    &sl 4
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        NAV {
            bindings = <
&trans  &trans        &trans        &kp F2     &kp F9          &trans                       &trans          &trans  &kp PG_UP  &kp UP    &kp PG_DN  &trans    &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans               &trans  &trans  &trans  &trans  &kp LEFT   &kp DOWN  &kp RIGHT  &trans    &trans
&trans  &trans        &kp LC(X)     &kp LC(C)  &trans          &kp LC(V)  &trans            &trans          &trans  &kp HOME   &none     &kp END    &kp BSPC  &trans
                                    &trans     &trans          &trans                                       &trans  &trans     &trans
            >;

            label = "NAV";
        };

        NUM {
            bindings = <
&trans  &trans  &trans  &kp LBKT            &kp RBKT                   &trans                    &trans          &kp MINUS  &kp N7  &kp N8   &kp N9  &none            &trans
&trans  &trans  &trans  &kp LS(N9)          &kp LS(RIGHT_PARENTHESIS)  &trans            &trans  &trans  &trans  &kp EQUAL  &kp N4  &kp N5   &kp N6  &kp KP_MULTIPLY  &trans
&trans  &trans  &trans  &kp LS(LEFT_BRACE)  &kp LS(RIGHT_BRACE)        &trans  &trans            &trans          &kp PLUS   &kp N1  &kp N2   &kp N3  &kp KP_DIVIDE    &trans
                        &trans              &trans                     &trans                                    &trans     &kp N0  &kp DOT
            >;

            label = "NUM";
        };

        SYM {
            bindings = <
&trans  &trans        &trans        &trans     &trans          &trans                    &trans          &trans  &kp LS(N7)    &kp LS(N8)     &kp LS(N9)        &trans         &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans            &trans  &trans  &trans  &trans  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(NUMBER_6)  &trans         &trans
&trans  &trans        &trans        &trans     &trans          &trans  &trans            &trans          &trans  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)     &kp BACKSLASH  &trans
                                    &trans     &trans          &trans                                    &trans  &trans        &trans
            >;

            label = "SYM";
        };

        GER {
            bindings = <
&trans  &trans     &trans  &trans     &trans  &trans                    &trans          &trans  &trans  &kp RA(Y)  &trans  &trans     &trans
&trans  &kp RA(Q)  &trans  &kp RA(S)  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans     &trans  &kp RA(P)  &trans
&trans  &trans     &trans  &trans     &trans  &trans  &trans            &trans          &trans  &trans  &trans     &trans  &trans     &trans
                           &trans     &trans  &trans                                    &trans  &trans  &trans
            >;

            label = "GER";
        };

        QWERTY {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E         &kp R   &kp T                    &trans          &kp Y   &kp U   &kp I   &kp O      &kp P     &kp LBKT
&kp LSHFT  &kp A  &kp S  &kp D         &kp F   &kp G            &trans  &trans  &trans  &kp H   &kp J   &kp K   &kp L      &kp SEMI  &kp APOS
&kp LCTRL  &kp Z  &kp X  &kp C         &kp V   &kp B  &trans            &trans          &kp B   &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH
                         &kp LEFT_ALT  &trans  &mo 7                                    &trans  &trans  &trans
            >;

            label = "QWERTY";
        };

        FUN {
            bindings = <
&trans          &bt BT_CLR     &trans         &trans         &trans         &trans                    &trans          &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&bt BT_CLR_ALL  &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3   &trans            &trans  &trans  &trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans          &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3  &trans  &trans            &trans          &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                                              &trans         &trans         &trans                                    &trans  &trans  &trans
            >;

            label = "FUN";
        };

        Gaming_Numbers {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            label = "Gaming_Numbers";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
