#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 42 43 44 45 45 46 47>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 34 42 43 44 45 46 47>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Colemak";
            bindings = <
&kp ESCAPE  &kp Q            &kp W            &kp F         &kp P              &kp B                             &kp UP                &kp J        &kp L              &kp U         &kp Y            &kp SEMI         &kp DELETE
&td0        &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LCTRL S  &hml LEFT_SHIFT T  &kp G                   &kp LEFT  &kp ENTER  &kp RIGHT  &kp M        &hmr LEFT_SHIFT N  &hmr LCTRL E  &hmr LEFT_ALT I  &hmr LEFT_GUI O  &kp SQT
&kp LCTRL   &kp Z            &kp X            &kp C         &kp D              &kp V      &kp SPACE              &kp DOWN              &kp K        &kp H              &kp COMMA     &kp DOT          &kp FSLH         &kp ESC
                                              &kp RALT      &lt 1 SPACE        &lt 2 TAB                                               &lt 5 ENTER  &lt 3 BACKSPACE    &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        NAV {
            bindings = <
&trans  &trans        &trans        &trans     &trans          &trans                    &trans          &trans  &kp PG_UP  &kp UP    &kp PG_DN  &trans    &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans            &trans  &trans  &trans  &trans  &kp LEFT   &kp DOWN  &kp RIGHT  &trans    &trans
&trans  &trans        &trans        &trans     &trans          &trans  &trans            &trans          &trans  &kp HOME   &none     &kp END    &kp BSPC  &trans
                                    &trans     &trans          &trans                                    &trans  &trans     &trans
            >;
        };

        NUM {
            bindings = <
&trans  &trans        &trans        &trans     &trans          &trans                    &trans          &kp PLUS   &kp N7  &kp N8   &kp N9  &kp KP_DIVIDE    &trans
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kt LCTRL  &kt LEFT_SHIFT  &trans            &trans  &trans  &trans  &kp MINUS  &kp N4  &kp N5   &kp N6  &kp KP_ASTERISK  &trans
&trans  &trans        &trans        &trans     &trans          &trans  &trans            &trans          &kp EQUAL  &kp N1  &kp N2   &kp N3  &kp ENTER        &trans
                                    &trans     &trans          &trans                                    &kp ENTER  &kp N0  &kp DOT
            >;
        };

        SYM {
            bindings = <
&trans  &trans            &kp LEFT_BRACKET      &trans  &kp RIGHT_BRACKET      &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LS(NUMBER_1)  &kp LS(N9)            &trans  &kp LS(N0)             &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans            &kp LS(LEFT_BRACKET)  &trans  &kp LS(RIGHT_BRACKET)  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                                &trans  &trans                 &trans                                    &trans  &trans  &trans
            >;
        };

        QWERTY {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E   &kp R   &kp T                     &trans          &kp Y   &kp U   &kp I   &kp O      &kp P     &kp LBKT
&kp LSHFT  &kp A  &kp S  &kp D   &kp F   &kp G             &trans  &trans  &trans  &kp H   &kp J   &kp K   &kp L      &kp SEMI  &kp APOS
&kp LCTRL  &kp Z  &kp X  &kp C   &kp V   &kp B   &trans            &trans          &kp B   &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH
                         &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        GER {
            bindings = <
&trans  &trans     &trans  &trans     &trans  &trans                    &trans          &trans  &trans  &kp RA(U)  &trans  &trans     &trans
&trans  &kp RA(Q)  &trans  &kp RA(S)  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans     &trans  &kp RA(O)  &trans
&trans  &trans     &trans  &trans     &trans  &trans  &trans            &trans          &trans  &trans  &trans     &trans  &trans     &trans
                           &trans     &trans  &trans                                    &trans  &trans  &trans
            >;
        };
    };
};
